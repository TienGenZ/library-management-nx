// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LIBRARIAN
}

enum ReaderType {
  STUDENT
  TEACHER
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String?
  name      String?
  role      Role?    @default(LIBRARIAN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Reader {
  id           Int            @id @default(autoincrement())
  name         String?
  email        String?
  address      String?
  dob          String?
  type         ReaderType?    @default(STUDENT)
  expiredAt    DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)
  readerToBook ReaderToBook[]

  @@unique([name, dob])
}

model BookType {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  book      Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Publisher {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  book      Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Book {
  id                   Int            @id @default(autoincrement())
  name                 String?
  bookTypeId           Int
  publisherId          Int
  type                 BookType       @relation(fields: [bookTypeId], references: [id])
  publisher            Publisher      @relation(fields: [publisherId], references: [id])
  author               String
  publishedAt          Int
  receivingDate        DateTime
  borrowed             Boolean?       
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  deleted              Boolean        @default(false)
  readerToBook         ReaderToBook[]
}

model ReaderToBook {
  id        Int      @id @default(autoincrement())
  readerId  Int
  bookId    Int
  reader    Reader   @relation(fields: [readerId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  returned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt String
  deleted   Boolean  @default(false)
}

model Policy {
  id                 Int @id @default(autoincrement())
  minAge             Int
  maxAge             Int
  cardReaderDuration Int
  bookDate           Int
  maxBooks           Int
  maxDate            Int
}
